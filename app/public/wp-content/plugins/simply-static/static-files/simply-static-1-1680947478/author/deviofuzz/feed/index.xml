<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>deviofuzz &#8211; devIOFuzz</title>
	<atom:link href="https://www.deviofuzz.com/author/deviofuzz/feed/" rel="self" type="application/rss+xml" />
	<link>https://www.deviofuzz.com/</link>
	<description></description>
	<lastBuildDate>Fri, 07 Apr 2023 19:24:16 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.2</generator>
	<item>
		<title>Let&#8217;s talk about chatGPT</title>
		<link>https://www.deviofuzz.com/lets-talk-about-chatgpt/</link>
					<comments>https://www.deviofuzz.com/lets-talk-about-chatgpt/#respond</comments>
		
		<dc:creator><![CDATA[deviofuzz]]></dc:creator>
		<pubDate>Fri, 07 Apr 2023 19:24:12 +0000</pubDate>
				<category><![CDATA[Uncategorized]]></category>
		<guid isPermaLink="false">https://www.deviofuzz.com/?p=147</guid>

					<description><![CDATA[Last updated on&#160;Feb 26, 2023 In the last few months, the internet has gone crazy over ChatGPT. It&#8217;s become a high trend around the world on all levels. After I tried it out and read some news, reviews, and watched some YouTube channels doing crazy stuff, like a lot of videos on &#8220;How to make&#8230;&#160;<a href="https://www.deviofuzz.com/lets-talk-about-chatgpt/" class="" rel="bookmark">Read More &#187;<span class="screen-reader-text">Let&#8217;s talk about chatGPT</span></a>]]></description>
										<content:encoded><![CDATA[
<p>Last updated on&nbsp;Feb 26, 2023</p>



<figure class="wp-block-image"><img decoding="async" src="https://images.unsplash.com/photo-1675557009875-436f71457475?crop=entropy&amp;cs=tinysrgb&amp;fit=max&amp;fm=jpg&amp;ixid=MnwxMTc3M3wwfDF8c2VhcmNofDR8fGNoYXRHUFR8ZW58MHx8fHwxNjc2ODgxMzMw&amp;ixlib=rb-4.0.3&amp;q=80&amp;w=960" alt="Let's talk about chatGPT"/><figcaption class="wp-element-caption">Photo by&nbsp;<a href="https://unsplash.com/@jupp?utm_source=ghost&amp;utm_medium=referral&amp;utm_campaign=api-credit">Jonathan Kemper</a>&nbsp;/&nbsp;<a href="https://unsplash.com/?utm_source=ghost&amp;utm_medium=referral&amp;utm_campaign=api-credit">Unsplash</a></figcaption></figure>



<p>In the last few months, the internet has gone crazy over ChatGPT. It&#8217;s become a high trend around the world on all levels. After I tried it out and read some news, reviews, and watched some YouTube channels doing crazy stuff, like a lot of videos on &#8220;How to make money with ChatGPT,&#8221; I decided to start my new brand post about this topic.</p>



<p>In my opinion, ChatGPT is a great tool for all kinds of areas because it helps to automate flows, for example in Excel, programming, reviewing texts, learning, and searching for information in general. However, when it comes to &#8220;creation,&#8221; we have a big problem. We can ask ChatGPT to create poems, images, and even entire books with just a few inputs, but how much unique and original content will we have across the internet that we can trust is something made by a robot or actually something made fully by a human? Plus, we can get lazy and even demotivated to create something from scratch if the machine can do it better and with more quality.</p>



<p>I won&#8217;t extend the topic here because this is my first post, and I just want to bring up some thoughts and reflections around this topic. Following some interesting videos I saw on the internet about the power of this AI.</p>



<p>Cheers, see you in the next post.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://www.deviofuzz.com/lets-talk-about-chatgpt/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Installing Docker and Pi-hole in your home Linux server machine.</title>
		<link>https://www.deviofuzz.com/installing-docker-and-pi-hole-in-your-home-linux-server-machine/</link>
					<comments>https://www.deviofuzz.com/installing-docker-and-pi-hole-in-your-home-linux-server-machine/#respond</comments>
		
		<dc:creator><![CDATA[deviofuzz]]></dc:creator>
		<pubDate>Fri, 07 Apr 2023 19:23:31 +0000</pubDate>
				<category><![CDATA[Uncategorized]]></category>
		<guid isPermaLink="false">https://www.deviofuzz.com/?p=145</guid>

					<description><![CDATA[Last updated on&#160;Feb 26, 2023 Hello! Let&#8217;s start installing Docker in Ubuntu 20.04. 2. Install and Run/Enable docker.io package 3. Install Kubernetes &#8211; kubectl 4. Disable DNS server 4.1 Open the file /etc/resolv.conf and fix the DNS to 8.8.8.8 (Google), save and close it. 4.2 Test if you can ping www.google.com 5. Create a docker&#8230;&#160;<a href="https://www.deviofuzz.com/installing-docker-and-pi-hole-in-your-home-linux-server-machine/" class="" rel="bookmark">Read More &#187;<span class="screen-reader-text">Installing Docker and Pi-hole in your home Linux server machine.</span></a>]]></description>
										<content:encoded><![CDATA[
<p>Last updated on&nbsp;Feb 26, 2023</p>



<figure class="wp-block-image"><img decoding="async" src="https://images.unsplash.com/photo-1646627927863-19874c27316b?crop=entropy&amp;cs=tinysrgb&amp;fit=max&amp;fm=jpg&amp;ixid=MnwxMTc3M3wwfDF8c2VhcmNofDd8fGRvY2tlcnxlbnwwfHx8fDE2NzczMDk4NzE&amp;ixlib=rb-4.0.3&amp;q=80&amp;w=960" alt="Installing Docker and Pi-hole in your home Linux server machine."/><figcaption class="wp-element-caption">Photo by&nbsp;<a href="https://unsplash.com/@rubaitulazad?utm_source=ghost&amp;utm_medium=referral&amp;utm_campaign=api-credit">Rubaitul Azad</a>&nbsp;/&nbsp;<a href="https://unsplash.com/?utm_source=ghost&amp;utm_medium=referral&amp;utm_campaign=api-credit">Unsplash</a></figcaption></figure>



<p>Hello!</p>



<p>Let&#8217;s start installing Docker in Ubuntu 20.04.</p>



<ol>
<li>First, update all the repositories for Linux packages using apt.</li>
</ol>



<pre class="wp-block-code"><code>&gt;: sudo apt update</code></pre>



<p>2. Install and Run/Enable docker.io package</p>



<pre class="wp-block-code"><code>&gt;: sudo apt install docker.io
&gt;: sudo systemctl start docker
&gt;: sudo systemctl enable docker</code></pre>



<p>3. Install Kubernetes &#8211; kubectl</p>



<pre class="wp-block-code"><code>&gt;: sudo apt-get update &amp;&amp; sudo apt-get install -y apt-transport-https

&gt;: curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -

&gt;: echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee -a /etc/apt/sources.list.d/kubernetes.list

&gt;:sudo apt-get update
&gt;:sudo apt-get install -y kubectl
</code></pre>



<p>4. Disable DNS server</p>



<pre class="wp-block-code"><code>&gt;: sudo systemctl stop systemd-resolved.service
&gt;: sudo systemctl disable systemd-resolved.service

</code></pre>



<p>4.1 Open the file /etc/resolv.conf and fix the DNS to 8.8.8.8 (Google), save and close it.</p>



<p>4.2 Test if you can ping www.google.com</p>



<p>5. Create a docker container for Pi-hole</p>



<pre class="wp-block-code"><code>&gt;: sudo touch pihole.sh
&gt;: sudo chmod 777 pihole.sh</code></pre>



<p>Add the content and run the script below</p>



<pre class="wp-block-code"><code><strong>#!/bin/bash</strong>

# https://github.com/pi-hole/docker-pi-hole/blob/master/README.md

docker run -d \
    --name pihole \
    -p 53:53/tcp -p 53:53/udp \
    -p 80:80 \
    -p 443:443 \
    -p 8080:8080 \
    -e TZ="America/Chicago" \
    -v "/etc/pihole/" \
    -v "/etc/dnsmasq.d/" \
    --dns=127.0.0.1 --dns=1.1.1.1 \
    --restart=unless-stopped \
    pihole/pihole:latest

printf 'Starting up pihole container '
for i in $(seq 1 20); do
    if &#91; "$(docker inspect -f "{{.State.Health.Status}}" pihole)" == "healthy" ] ; then
        printf ' OK'
        echo -e "\n$(docker logs pihole <strong>2</strong>&gt; /dev/null | grep 'password:') for your pi-hole: https://${IP}/admin/"
        exit 0
    else
        sleep 3
        printf '.'
    fi

    if &#91; $i -eq 20 ] ; then
        echo -e "\nTimed out waiting for Pi-hole start, consult check your container logs for more info (\`docker logs pihole\`)"
        exit 1
    fi
done;</code></pre>



<pre class="wp-block-code"><code>&gt;: sudo ./pihole.sh</code></pre>



<p>6. Save your generated password for use it later.</p>



<p>Example:</p>



<p>[i] Assigning random password: evOaEdsu for your pi-hole: https://&lt;your_ip&gt;/admin/login.php</p>



<p>7. Change your iptables rules</p>



<pre class="wp-block-code"><code>&gt;: sudo vim /etc/iptables/rules.v4

</code></pre>



<ul>
<li>Add the lines below:</li>
</ul>



<pre class="wp-block-code"><code>-A INPUT -p tcp --dport 53 -j ACCEPT   
-A INPUT -p udp --dport 53 -j ACCEPT
-A INPUT -p tcp -m state --state NEW -m tcp --dport 80 -j ACCEPT</code></pre>



<ul>
<li>Save and close it</li>
</ul>



<p>8. Reboot the Linux.</p>



<p>9. Go to your pi-hole server!</p>



<figure class="wp-block-embed"><div class="wp-block-embed__wrapper">
https://&lt;your_ip>/admin
</div></figure>



<p>Use the password generated above.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://www.deviofuzz.com/installing-docker-and-pi-hole-in-your-home-linux-server-machine/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Making your Linux home server more &#8220;safe&#8221;</title>
		<link>https://www.deviofuzz.com/making-your-linux-home-server-more-safe/</link>
					<comments>https://www.deviofuzz.com/making-your-linux-home-server-more-safe/#respond</comments>
		
		<dc:creator><![CDATA[deviofuzz]]></dc:creator>
		<pubDate>Fri, 07 Apr 2023 19:23:04 +0000</pubDate>
				<category><![CDATA[Uncategorized]]></category>
		<guid isPermaLink="false">https://www.deviofuzz.com/?p=143</guid>

					<description><![CDATA[Last updated on&#160;Feb 26, 2023 There are a list of recommended steps to make your Linux server a little bit more protected against hackers. 2. Don&#8217;t use root for everything, create your own user and give it privileges for sudo. 3. Use Private/Public keys instead of passwords. Passwords can be broken easily. 4. Change your&#8230;&#160;<a href="https://www.deviofuzz.com/making-your-linux-home-server-more-safe/" class="" rel="bookmark">Read More &#187;<span class="screen-reader-text">Making your Linux home server more &#8220;safe&#8221;</span></a>]]></description>
										<content:encoded><![CDATA[
<p>Last updated on&nbsp;Feb 26, 2023</p>



<figure class="wp-block-image"><img decoding="async" src="https://images.unsplash.com/photo-1504639725590-34d0984388bd?crop=entropy&amp;cs=tinysrgb&amp;fit=max&amp;fm=jpg&amp;ixid=MnwxMTc3M3wwfDF8c2VhcmNofDF8fGhhY2tlcnxlbnwwfHx8fDE2NzczMzU0OTY&amp;ixlib=rb-4.0.3&amp;q=80&amp;w=960" alt="Making your Linux home server more &quot;safe&quot;"/><figcaption class="wp-element-caption">Photo by&nbsp;<a href="https://unsplash.com/@ikukevk?utm_source=ghost&amp;utm_medium=referral&amp;utm_campaign=api-credit">Kevin Ku</a>&nbsp;/&nbsp;<a href="https://unsplash.com/?utm_source=ghost&amp;utm_medium=referral&amp;utm_campaign=api-credit">Unsplash</a></figcaption></figure>



<p>There are a list of recommended steps to make your Linux server a little bit more protected against hackers.</p>



<ol>
<li>Always update your packages, and make them automatically update.</li>
</ol>



<pre class="wp-block-code"><code>#Manual Updates: 

ubuntu@instance:~$ sudo apt update 
ubuntu@instance:~$ sudo apt dist-upgrade 

 
#Automatic Updates: 

ubuntu@instance:~$ sudo apt install unattended-upgrades 
ubuntu@instance:~$ sudo dpkg-reconfigure --priority=low unattended-upgrades </code></pre>



<p>2. Don&#8217;t use root for everything, create your own user and give it privileges for sudo.</p>



<pre class="wp-block-code"><code>&gt;: sudo adduser &lt;username&gt;
&gt;: sudo usermod -aG sudo &lt;username&gt;</code></pre>



<p>3. Use Private/Public keys instead of passwords. Passwords can be broken easily.</p>



<pre class="wp-block-code"><code>#Create the Public Key Directory on your Linux Server 
&gt;: mkdir ~/.ssh &amp;&amp; chmod 700 ~/.ssh 

#Create Public/Private keys on your computer 
&gt;: ssh-keygen -b 4096 

#Upload your Public key to the your Linux Server (Windows) 
&gt;: scp $env:USERPROFILE/.ssh/id_rsa.pub &lt;username&gt;@&lt;server ip&gt;:~/.ssh/authorized_keys 

#Send your Public key to the your Linux Server (MAC) 
&gt;: scp ~/.ssh/id_rsa.pub &lt;username&gt;@&lt;server_ip&gt;:~/.ssh/authorized_keys 

#Send your Public key to the your Linux Server (LINUX) 
&gt;: ssh-copy-id &lt;username&gt;@&lt;server_ip&gt; </code></pre>



<p>4. Change your ssh config file to lock some kind of root access and password access</p>



<p>4.1 Edit your ssh config file:</p>



<pre class="wp-block-code"><code>&gt;: sudo vim /etc/ssh/sshd_config</code></pre>



<p>4.1.1 Change the default port used for ssh. The default one is 22, change for something different like 713.</p>



<p>4.1.2 Change the parameter:</p>



<p> - &nbsp;<em>PermitRootLogin prohibit-password</em></p>



<p>to</p>



<p>&nbsp; &nbsp;&#8211; PermitRootLogin no</p>



<p>To block the root access login in ssh</p>



<p>4.1.3 Uncomment as well the parameter&nbsp;<em>PubkeyAuthentication yes</em></p>



<p>to allow ssh access via pair Private/Public key.</p>



<p>5. Firewall setup</p>



<pre class="wp-block-code"><code>#See open ports
&gt;: sudo ss -tupln

#Install ufw
&gt;: sudo apt ufw

#Get the ufw status
&gt;: sudo ufw status

#Allow por through firewall
&gt;: sudo ufw allow &lt;port_number&gt;

#Active firewall
&gt;: sudo ufw enable

#Reload firewall 
&gt;: sudo ufw reload</code></pre>



<p>6. Block pings</p>



<pre class="wp-block-code"><code>#Edit the ufw configuration file
&gt;: sudo vim /etc/ufw/before.rules

#Add this line 
-A ufw-before-input -p icmp --icmp-type echo-request -j DROP
</code></pre>



<p>Done! Now you have some security level in your juice linux server!</p>



<p>Cheers!</p>
]]></content:encoded>
					
					<wfw:commentRss>https://www.deviofuzz.com/making-your-linux-home-server-more-safe/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Making your own Minecraft server using Docker</title>
		<link>https://www.deviofuzz.com/making-your-own-minecraft-server-using-docker/</link>
					<comments>https://www.deviofuzz.com/making-your-own-minecraft-server-using-docker/#respond</comments>
		
		<dc:creator><![CDATA[deviofuzz]]></dc:creator>
		<pubDate>Fri, 07 Apr 2023 19:22:34 +0000</pubDate>
				<category><![CDATA[Uncategorized]]></category>
		<guid isPermaLink="false">https://www.deviofuzz.com/?p=141</guid>

					<description><![CDATA[Last updated on&#160;Feb 26, 2023 And run the script. Obs: If your firewall is enabled, you have to allow the port 19132/udp like below Interacting with the server RCON&#160;is enabled by default, so you can&#160;exec&#160;into the container to access the Minecraft server console: Note: The&#160;-i&#160;is required for interactive use of rcon-cli. To run a simple,&#8230;&#160;<a href="https://www.deviofuzz.com/making-your-own-minecraft-server-using-docker/" class="" rel="bookmark">Read More &#187;<span class="screen-reader-text">Making your own Minecraft server using Docker</span></a>]]></description>
										<content:encoded><![CDATA[
<p>Last updated on&nbsp;Feb 26, 2023</p>



<figure class="wp-block-image"><img decoding="async" src="https://images.unsplash.com/photo-1524685794168-52985e79c1f8?crop=entropy&amp;cs=tinysrgb&amp;fit=max&amp;fm=jpg&amp;ixid=MnwxMTc3M3wwfDF8c2VhcmNofDR8fE1pbmVjcmFmdHxlbnwwfHx8fDE2NzczNjU0Mzk&amp;ixlib=rb-4.0.3&amp;q=80&amp;w=960" alt="Making your own Minecraft server using Docker"/><figcaption class="wp-element-caption">Photo by&nbsp;<a href="https://unsplash.com/@nina_eyes?utm_source=ghost&amp;utm_medium=referral&amp;utm_campaign=api-credit">Nina Rivas</a>&nbsp;/&nbsp;<a href="https://unsplash.com/?utm_source=ghost&amp;utm_medium=referral&amp;utm_campaign=api-credit">Unsplash</a></figcaption></figure>



<ol>
<li>Assuming that Docker is working fine in your Linux, create a bash script to easily startup the server, include the command below.</li>
</ol>



<pre class="wp-block-code"><code>ubuntu@instance:~$ sudo touch run_minecraft_server
ubuntu@instance:~$ sudo chmod 777 run_minecraft_server</code></pre>



<pre class="wp-block-code"><code>#/bin/bash
sudo docker run -e EULA=TRUE -d -it --name=minecraft-server-dock \
  -v ~/bedrock-server:/data \
  -e SERVER_NAME="My Minecraft Server" \
  -e GAMEMODE=survival \
  -e DIFFICULTY=normal \
  -e OPS=myusername \
  -p 19132:19132/udp \
  itzg/minecraft-bedrock-server</code></pre>



<p>And run the script.</p>



<pre class="wp-block-code"><code>ubuntu@instance:~$ sudo ./run_minecraft_server</code></pre>



<p>Obs: If your firewall is enabled, you have to allow the port 19132/udp like below</p>



<pre class="wp-block-code"><code>ubuntu@instance:~$ sudo ufw allow 19132/udp
ubuntu@instance:~$ sudo ufw reload</code></pre>



<h2 class="wp-block-heading">Interacting with the server</h2>



<p><a href="http://wiki.vg/RCON?ref=deviofuzz.com">RCON</a>&nbsp;is enabled by default, so you can&nbsp;<code>exec</code>&nbsp;into the container to access the Minecraft server console:</p>



<pre class="wp-block-code"><code>#confident_bhaskara is your docker container name 
ubuntu@instance:~$ sudo docker exec -i confident_bhaskara rcon-cli</code></pre>



<p>Note: The&nbsp;<code>-i</code>&nbsp;is required for interactive use of rcon-cli.</p>



<p>To run a simple, one-shot command, such as stopping a Minecraft server, pass the command as arguments to&nbsp;<code>rcon-cli</code>, such as:</p>



<pre class="wp-block-code"><code>ubuntu@instance:~$ docker exec confident_bhaskara rcon-cli stop
</code></pre>



<p><em>The&nbsp;<code>-i</code>&nbsp;is not needed in this case.</em></p>



<p>If rcon is disabled you can send commands by passing them as arguments to the packaged&nbsp;<code>mc-send-to-console</code>&nbsp;script. For example, a player can be op&#8217;ed in the container&nbsp;<em>confident_bhaskara</em>&nbsp;with:</p>



<pre class="wp-block-code"><code>ubuntu@instance:~$ docker exec mc mc-send-to-console op player</code></pre>



<p>In order to attach and interact with the Minecraft server, add&nbsp;<code>-it</code>&nbsp;when starting the container, such as</p>



<pre class="wp-block-code"><code>ubuntu@instance:~$ docker run -d -it -p 25565:25565 --name mc itzg/minecraft-server
</code></pre>



<p>With that you can attach and interact at any time using</p>



<pre class="wp-block-code"><code>ubuntu@instance:~$ docker attach mc
</code></pre>



<p>and then Control-p Control-q to&nbsp;<strong>detach</strong>.</p>



<p>For remote access, configure your Docker daemon to use a&nbsp;<code>tcp</code>&nbsp;socket (such as&nbsp;<code>-H tcp://0.0.0.0:2375</code>) and attach from another machine:</p>



<pre class="wp-block-code"><code>ubuntu@instance:~$ docker -H $HOST:2375 attach mc
</code></pre>



<p>Unless you&#8217;re on a home/private LAN, you should&nbsp;<a href="https://docs.docker.com/articles/https/?ref=deviofuzz.com">enable TLS access</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://www.deviofuzz.com/making-your-own-minecraft-server-using-docker/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Portainer.io Instalation and run</title>
		<link>https://www.deviofuzz.com/portainer-io-instalation-and-run/</link>
					<comments>https://www.deviofuzz.com/portainer-io-instalation-and-run/#respond</comments>
		
		<dc:creator><![CDATA[deviofuzz]]></dc:creator>
		<pubDate>Fri, 07 Apr 2023 19:22:08 +0000</pubDate>
				<category><![CDATA[Uncategorized]]></category>
		<guid isPermaLink="false">https://www.deviofuzz.com/?p=139</guid>

					<description><![CDATA[Last updated on&#160;Mar 2, 2023 Portainer is a very good container management system. Let&#8217;s install it and take a look at it. Go to the webpage and create an account and you get an email with the key and instructions on how to install it. I will do it here step by step. 2. Open&#8230;&#160;<a href="https://www.deviofuzz.com/portainer-io-instalation-and-run/" class="" rel="bookmark">Read More &#187;<span class="screen-reader-text">Portainer.io Instalation and run</span></a>]]></description>
										<content:encoded><![CDATA[
<p>Last updated on&nbsp;Mar 2, 2023</p>



<figure class="wp-block-image"><img decoding="async" src="https://www.deviofuzz.com/content/images/size/w960/2023/03/portainer.png" alt="Portainer.io Instalation and run"/></figure>



<p>Portainer is a very good container management system. Let&#8217;s install it and take a look at it.</p>



<ol>
<li>First, you need to create a free account (restrict with 5 nodes) that is enough to have in your home servers for your own usage.</li>
</ol>



<p>Go to the webpage and create an account and you get an email with the key and instructions on how to install it. I will do it here step by step.</p>



<p>2. Open these ports to be available for Portainer application.</p>



<pre class="wp-block-code"><code>&gt;: sudo ufw allow 8000
&gt;: sudo ufw allow 9443/tcp
</code></pre>



<p>3. Download and install the Portainer Server container</p>



<pre class="wp-block-code"><code>&gt;: docker run -d -p 8000:8000 -p 9443:9443 --name=portainer --restart=always \
    -v /var/run/docker.sock:/var/run/docker.sock \
    -v portainer_data:/data \
    portainer/portainer-ee:latest</code></pre>



<p>4. Check if the Portainer Server is running.</p>



<pre class="wp-block-code"><code>&gt;: docker ps</code></pre>



<p>5. Loggin in</p>



<figure class="wp-block-embed"><div class="wp-block-embed__wrapper">
https://localhost:9443/
</div></figure>



<p>6. Create a new user admin and insert the key you got from email.</p>



<figure class="wp-block-image"><img decoding="async" src="https://www.deviofuzz.com/content/images/2023/03/image.png" alt=""/></figure>



<figure class="wp-block-image"><img decoding="async" src="https://www.deviofuzz.com/content/images/2023/03/image-1.png" alt=""/></figure>



<p>7. Now it&#8217;s just follow the wizard to add Environments. I think you can take it from here by yourself. Otherwise go to&nbsp;<a href="https://install.portainer.io/set-up-portainer?ref=deviofuzz.com">https://install.portainer.io/set-up-portainer</a></p>
]]></content:encoded>
					
					<wfw:commentRss>https://www.deviofuzz.com/portainer-io-instalation-and-run/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title></title>
		<link>https://www.deviofuzz.com/137-2/</link>
					<comments>https://www.deviofuzz.com/137-2/#respond</comments>
		
		<dc:creator><![CDATA[deviofuzz]]></dc:creator>
		<pubDate>Fri, 07 Apr 2023 19:21:13 +0000</pubDate>
				<category><![CDATA[Uncategorized]]></category>
		<guid isPermaLink="false">https://www.deviofuzz.com/?p=137</guid>

					<description><![CDATA[MacOS iTerm2 installation and customization Last updated on&#160;Mar 26, 2023 Install Homebrew Open up a terminal window and install homebrew with the following command: Configure the Homebrew to Path To Install iTerm2 Then you can start using the Iterm2 =) Installing Git Install Oh My Zsh Install PowerLevel10K Theme for Oh My Zsh Clone the&#8230;&#160;<a href="https://www.deviofuzz.com/137-2/" class="" rel="bookmark">Read More &#187;<span class="screen-reader-text"></span></a>]]></description>
										<content:encoded><![CDATA[
<h1 class="wp-block-heading">MacOS iTerm2 installation and customization</h1>



<p>Last updated on&nbsp;Mar 26, 2023</p>



<figure class="wp-block-image"><img decoding="async" src="https://images.unsplash.com/photo-1516031190212-da133013de50?crop=entropy&amp;cs=tinysrgb&amp;fit=max&amp;fm=jpg&amp;ixid=MnwxMTc3M3wwfDF8c2VhcmNofDF8fGl0ZXJtfGVufDB8fHx8MTY3ODAzMDk3MA&amp;ixlib=rb-4.0.3&amp;q=80&amp;w=960" alt="MacOS iTerm2 installation and customization"/><figcaption class="wp-element-caption">Photo by&nbsp;<a href="https://unsplash.com/@pankajpatel?utm_source=ghost&amp;utm_medium=referral&amp;utm_campaign=api-credit">Pankaj Patel</a>&nbsp;/&nbsp;<a href="https://unsplash.com/?utm_source=ghost&amp;utm_medium=referral&amp;utm_campaign=api-credit">Unsplash</a></figcaption></figure>



<h2 class="wp-block-heading">Install Homebrew</h2>



<p>Open up a terminal window and install homebrew with the following command:</p>



<h2 class="wp-block-heading">Configure the Homebrew to Path</h2>



<pre class="wp-block-code"><code>echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' &gt;&gt; /Users/&#91;username]/.zprofile eval "$(/opt/homebrew/bin/brew shellenv)"</code></pre>



<h2 class="wp-block-heading">To Install iTerm2</h2>



<pre class="wp-block-code"><code>brew install --cask iterm2</code></pre>



<p>Then you can start using the Iterm2 =)</p>



<h2 class="wp-block-heading">Installing Git</h2>



<pre class="wp-block-code"><code>brew install git</code></pre>



<h2 class="wp-block-heading">Install Oh My Zsh</h2>



<pre class="wp-block-code"><code>sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"</code></pre>



<h2 class="wp-block-heading">Install PowerLevel10K Theme for Oh My Zsh</h2>



<p>Clone the PowerLevel10K repo</p>



<pre class="wp-block-code"><code>git clone https://github.com/romkatv/powerlevel10k.git $ZSH_CUSTOM/themes/powerlevel10k</code></pre>



<p>After install, open the &#8220;~/.zshrc&#8221; file with your editor and change the value of &#8220;ZSH_THEME&#8221;, following below</p>



<pre class="wp-block-code"><code>ZSH_THEME="powerlevel10k/powerlevel10k"</code></pre>



<p>And run the command below to apply the changes.</p>



<pre class="wp-block-code"><code>source ~/.zshrc</code></pre>



<h2 class="wp-block-heading">Configure PowerLevel10K</h2>



<p>Restart iTerm2. You should now be seeing the PowerLevel10K configuration process. If you don&#8217;t, run the following:</p>



<pre class="wp-block-code"><code>p10k configure</code></pre>



<p>Follow the instructions for the PowerLevel10K configuration to make your terminal look as desired.</p>



<h2 class="wp-block-heading">Install ZSH Plugins</h2>



<p>Install zsh-autosuggestions:</p>



<pre class="wp-block-code"><code>git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions</code></pre>



<p>Install zsh-syntax-highlighting:</p>



<pre class="wp-block-code"><code>git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting</code></pre>



<p>Open the &#8220;~/.zshrc&#8221; file in your desired editor and modify the plugins line to what you see below.</p>



<pre class="wp-block-code"><code>plugins=(git zsh-autosuggestions zsh-syntax-highlighting web-search)</code></pre>



<p>Load these new plugins by running:</p>



<pre class="wp-block-code"><code>source ~/.zshrc</code></pre>
]]></content:encoded>
					
					<wfw:commentRss>https://www.deviofuzz.com/137-2/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Pi-hole, your ad blocker friend and DNS server.</title>
		<link>https://www.deviofuzz.com/pi-hole-your-ad-blocker-friend-and-dns-server/</link>
					<comments>https://www.deviofuzz.com/pi-hole-your-ad-blocker-friend-and-dns-server/#respond</comments>
		
		<dc:creator><![CDATA[deviofuzz]]></dc:creator>
		<pubDate>Fri, 07 Apr 2023 19:20:13 +0000</pubDate>
				<category><![CDATA[Uncategorized]]></category>
		<guid isPermaLink="false">https://www.deviofuzz.com/?p=135</guid>

					<description><![CDATA[]]></description>
										<content:encoded><![CDATA[]]></content:encoded>
					
					<wfw:commentRss>https://www.deviofuzz.com/pi-hole-your-ad-blocker-friend-and-dns-server/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Tip: Oracle Cloud &#8211; The free type services provided</title>
		<link>https://www.deviofuzz.com/tip-oracle-cloud-the-free-type-services-provided/</link>
					<comments>https://www.deviofuzz.com/tip-oracle-cloud-the-free-type-services-provided/#respond</comments>
		
		<dc:creator><![CDATA[deviofuzz]]></dc:creator>
		<pubDate>Fri, 07 Apr 2023 19:19:57 +0000</pubDate>
				<category><![CDATA[Uncategorized]]></category>
		<guid isPermaLink="false">https://www.deviofuzz.com/?p=133</guid>

					<description><![CDATA[]]></description>
										<content:encoded><![CDATA[]]></content:encoded>
					
					<wfw:commentRss>https://www.deviofuzz.com/tip-oracle-cloud-the-free-type-services-provided/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>How To Setup And Use The Yabai Tiling Window Manager On Mac</title>
		<link>https://www.deviofuzz.com/how-to-setup-and-use-the-yabai-tiling-window-manager-on-mac/</link>
					<comments>https://www.deviofuzz.com/how-to-setup-and-use-the-yabai-tiling-window-manager-on-mac/#respond</comments>
		
		<dc:creator><![CDATA[deviofuzz]]></dc:creator>
		<pubDate>Fri, 07 Apr 2023 19:18:02 +0000</pubDate>
				<category><![CDATA[Blog]]></category>
		<guid isPermaLink="false">https://www.deviofuzz.com/?p=131</guid>

					<description><![CDATA[&#62; ~/.zprofile eval \&#8221;$(/opt/homebrew/bin/brew shellenv)\&#8221;&#8221;]]],[1,&#8221;h2&#8243;,[[0,[],0,&#8221;Install Yabai&#8221;]]],[1,&#8221;p&#8221;,[[0,[],0,&#8221;Run the following command:&#8221;]]],[1,&#8221;p&#8221;,[[0,[0],1,&#8221;brew install koekeishiya/formulae/yabai&#8221;]]],[1,&#8221;h2&#8243;,[[0,[],0,&#8221;Install Skhd&#8221;]]],[1,&#8221;p&#8221;,[[0,[],0,&#8221;Run the following command:&#8221;]]],[1,&#8221;p&#8221;,[[0,[0],1,&#8221;brew install koekeishiya/formulae/skhd&#8221;]]],[1,&#8221;h2&#8243;,[[0,[],0,&#8221;Create Yabai Config File in Home Directory&#8221;]]],[1,&#8221;p&#8221;,[[0,[],0,&#8221;Move to home folder:&#8221;]]],[1,&#8221;p&#8221;,[[0,[0],1,&#8221;cd ~&#8221;]]],[1,&#8221;p&#8221;,[[0,[],0,&#8221;Create directory for yabai config file and move into it (config will live in \&#8221;.config/yabai/yabairc\&#8221;):&#8221;]]],[1,&#8221;p&#8221;,[[0,[0],1,&#8221;mkdir .config/yabai cd .config/yabai&#8221;]]],[1,&#8221;p&#8221;,[[0,[],0,&#8221;Create yabai config file:&#8221;]]],[1,&#8221;p&#8221;,[[0,[0],1,&#8221;touch yabairc&#8221;]]],[1,&#8221;h2&#8243;,[[0,[],0,&#8221;Add Configuration Options to File&#8221;]]],[1,&#8221;p&#8221;,[[0,[],0,&#8221;Open with preferred editor&#8230;&#160;<a href="https://www.deviofuzz.com/how-to-setup-and-use-the-yabai-tiling-window-manager-on-mac/" class="" rel="bookmark">Read More &#187;<span class="screen-reader-text">How To Setup And Use The Yabai Tiling Window Manager On Mac</span></a>]]></description>
										<content:encoded><![CDATA[
<p>&gt; ~/.zprofile eval \&#8221;$(/opt/homebrew/bin/brew shellenv)\&#8221;&#8221;]]],[1,&#8221;h2&#8243;,[[0,[],0,&#8221;Install Yabai&#8221;]]],[1,&#8221;p&#8221;,[[0,[],0,&#8221;Run the following command:&#8221;]]],[1,&#8221;p&#8221;,[[0,[0],1,&#8221;brew install koekeishiya/formulae/yabai&#8221;]]],[1,&#8221;h2&#8243;,[[0,[],0,&#8221;Install Skhd&#8221;]]],[1,&#8221;p&#8221;,[[0,[],0,&#8221;Run the following command:&#8221;]]],[1,&#8221;p&#8221;,[[0,[0],1,&#8221;brew install koekeishiya/formulae/skhd&#8221;]]],[1,&#8221;h2&#8243;,[[0,[],0,&#8221;Create Yabai Config File in Home Directory&#8221;]]],[1,&#8221;p&#8221;,[[0,[],0,&#8221;Move to home folder:&#8221;]]],[1,&#8221;p&#8221;,[[0,[0],1,&#8221;cd ~&#8221;]]],[1,&#8221;p&#8221;,[[0,[],0,&#8221;Create directory for yabai config file and move into it (config will live in \&#8221;.config/yabai/yabairc\&#8221;):&#8221;]]],[1,&#8221;p&#8221;,[[0,[0],1,&#8221;mkdir .config/yabai cd .config/yabai&#8221;]]],[1,&#8221;p&#8221;,[[0,[],0,&#8221;Create yabai config file:&#8221;]]],[1,&#8221;p&#8221;,[[0,[0],1,&#8221;touch yabairc&#8221;]]],[1,&#8221;h2&#8243;,[[0,[],0,&#8221;Add Configuration Options to File&#8221;]]],[1,&#8221;p&#8221;,[[0,[],0,&#8221;Open with preferred editor and add the following (\&#8221;open -t yabairc\&#8221;, \&#8221;code yabairc\&#8221; (visual studio code), \&#8221;vim yabairc\&#8221;, etc&#8230;). There are some configuration options that will be available only if you partially disable SIP (Sytem Integrity Protection). All of the options I&#8217;ve configured below will work without disabling SIP.&#8221;]]],[1,&#8221;p&#8221;,[[0,[],0,&#8221;Configure default layout to use: Binary Space Partitioning.&#8221;]]],[1,&#8221;p&#8221;,[[0,[0,1],1,&#8221;# default layout (can be bsp, stack or float)&#8221;],[0,[],1,&#8221;yabai -m config layout bsp&#8221;]]],[1,&#8221;p&#8221;,[[0,[],0,&#8221;Configure how window splits should be made:&#8221;]]],[1,&#8221;p&#8221;,[[0,[0,1],1,&#8221;# New window spawns to the right if vertical split, or bottom if horizontal split&#8221;],[0,[],1,&#8221;yabai -m config window_placement second_child&#8221;]]],[1,&#8221;p&#8221;,[[0,[],0,&#8221;Configure window padding:&#8221;]]],[1,&#8221;p&#8221;,[[0,[0,1],1,&#8221;# padding set to 12px&#8221;],[0,[],1,&#8221;yabai -m config top_padding 12yabai -m config bottom_padding 12yabai -m config left_padding 12yabai -m config right_padding 12yabai -m config window_gap 12&#8243;]]],[1,&#8221;p&#8221;,[[0,[],0,&#8221;Configure mouse settings:&#8221;]]],[1,&#8221;p&#8221;,[[0,[0,1],1,&#8221;# center mouse on window with focus&#8221;],[0,[],0,&#8221;yabai -m config mouse_follows_focus on &#8220;],[0,[1],1,&#8221;# modifier for clicking and dragging with mouse&#8221;],[0,[],0,&#8221;yabai -m config mouse_modifier alt &#8220;],[0,[1],1,&#8221;# set modifier + left-click drag to move window&#8221;],[0,[],0,&#8221;yabai -m config mouse_action1 move &#8220;],[0,[1],1,&#8221;# set modifier + right-click drag to resize window&#8221;],[0,[],0,&#8221;yabai -m config mouse_action2 resize &#8220;],[0,[1],1,&#8221;# when window is dropped in center of another window, swap them (on edges it will split it)&#8221;],[0,[],1,&#8221;yabai -m mouse_drop_action swap&#8221;]]],[1,&#8221;p&#8221;,[[0,[],0,&#8221;Disable specific apps from being managed with yabai. Use this format for the apps you&#8217;d like to disable.&#8221;]]],[1,&#8221;p&#8221;,[[0,[0],1,&#8221;yabai -m rule &#8211;add app=\&#8221;^System Settings$\&#8221; manage=off yabai -m rule &#8211;add app=\&#8221;^Calculator$\&#8221; manage=off yabai -m rule &#8211;add app=\&#8221;^Karabiner-Elements$\&#8221; manage=off&#8221;]]],[1,&#8221;h3&#8243;,[[0,[],0,&#8221;Start Yabai&#8221;]]],[1,&#8221;p&#8221;,[[0,[],0,&#8221;Start it like so:&#8221;]]],[1,&#8221;p&#8221;,[[0,[0],1,&#8221;brew services start yabai&#8221;]]],[1,&#8221;p&#8221;,[[0,[],0,&#8221;Allow any prompts for accessibility permissions.&#8221;]]],[1,&#8221;p&#8221;,[[0,[],0,&#8221;Restart yabai:&#8221;]]],[1,&#8221;p&#8221;,[[0,[0],1,&#8221;brew services restart yabai&#8221;]]],[1,&#8221;h3&#8243;,[[0,[],0,&#8221;Start Skhd&#8221;]]],[1,&#8221;p&#8221;,[[0,[],0,&#8221;Start it like so:&#8221;]]],[1,&#8221;p&#8221;,[[0,[0],1,&#8221;brew services start skhd&#8221;]]],[1,&#8221;p&#8221;,[[0,[],0,&#8221;Allow any prompts for accessibility permissions.&#8221;]]],[1,&#8221;p&#8221;,[[0,[],0,&#8221;Restart skhd:&#8221;]]],[1,&#8221;p&#8221;,[[0,[0],1,&#8221;brew services restart skhd&#8221;]]],[1,&#8221;h2&#8243;,[[0,[],0,&#8221;Create Skhd Config File in Home Directory&#8221;]]],[1,&#8221;p&#8221;,[[0,[],0,&#8221;Move to home folder:&#8221;]]],[1,&#8221;p&#8221;,[[0,[0],1,&#8221;cd ~&#8221;]]],[1,&#8221;p&#8221;,[[0,[],0,&#8221;Create directory for skhd config file and move into it (config will live in \&#8221;.config/skhd/skhdrc\&#8221;):&#8221;]]],[1,&#8221;p&#8221;,[[0,[0],1,&#8221;mkdir .config/skhd cd .config/skhd&#8221;]]],[1,&#8221;p&#8221;,[[0,[],0,&#8221;Create skhd config file:&#8221;]]],[1,&#8221;p&#8221;,[[0,[0],1,&#8221;touch skhdrc&#8221;]]],[1,&#8221;h2&#8243;,[[0,[],0,&#8221;Add Keyboard Shortcuts To Config File&#8221;]]],[1,&#8221;p&#8221;,[[0,[],0,&#8221;These shortcuts are completely up to you, but you can use mine as reference. The way I like to do it is to choose two primary modifiers and a third if necessary. These could be something like \&#8221;alt\&#8221;, \&#8221;shift + alt\&#8221;, and \&#8221;ctrl + alt\&#8221;.&#8221;]]],[1,&#8221;p&#8221;,[[0,[],0,&#8221;One recommendation is to change \&#8221;shift + alt\&#8221; to \&#8221;hyper\&#8221; if you have a \&#8221;hyper\&#8221; key on your keyboard (\&#8221;command\&#8221; + \&#8221;control\&#8221; + \&#8221;shift\&#8221; + \&#8221;alt\&#8221;). You could configure a \&#8221;hyper\&#8221; key (replacing \&#8221;Caps Lock\&#8221; for example) with something like \&#8221;Karabiner-Elements\&#8221;.&#8221;]]],[1,&#8221;h3&#8243;,[[0,[],0,&#8221;Changing Focus Shortcuts&#8221;]]],[1,&#8221;h4&#8243;,[[0,[],0,&#8221;Change Focus Within Space&#8221;]]],[1,&#8221;p&#8221;,[[0,[0,1],1,&#8221;# change window focus within space&#8221;],[0,[],1,&#8221;alt &#8211; j : yabai -m window &#8211;focus south alt &#8211; k : yabai -m window &#8211;focus north alt &#8211; h : yabai -m window &#8211;focus west alt &#8211; l : yabai -m window &#8211;focus east&#8221;]]],[1,&#8221;h4&#8243;,[[0,[],0,&#8221;Change Focus Between Displays&#8221;]]],[1,&#8221;p&#8221;,[[0,[0,1],1,&#8221;#change focus between external displays (left and right)&#8221;],[0,[],1,&#8221;alt &#8211; s: yabai -m display &#8211;focus west alt &#8211; g: yabai -m display &#8211;focus east&#8221;]]],[1,&#8221;h3&#8243;,[[0,[],0,&#8221;Shortcuts For Modifying The Layout&#8221;]]],[1,&#8221;p&#8221;,[[0,[0,1],1,&#8221;# rotate layout clockwise&#8221;],[0,[],0,&#8221;shift + alt &#8211; r : yabai -m space &#8211;rotate 270&#8243;],[0,[1],1,&#8221;# flip along y-axis&#8221;],[0,[],0,&#8221;shift + alt &#8211; y : yabai -m space &#8211;mirror y-axis &#8220;],[0,[1],1,&#8221;# flip along x-axis&#8221;],[0,[],0,&#8221;shift + alt &#8211; x : yabai -m space &#8211;mirror x-axis &#8220;],[0,[1],1,&#8221;# toggle window float&#8221;],[0,[],1,&#8221;shift + alt &#8211; t : yabai -m window &#8211;toggle float &#8211;grid 4:4:1:1:2:2&#8243;]]],[1,&#8221;h3&#8243;,[[0,[],0,&#8221;Modifying Window Size Shortcuts&#8221;]]],[1,&#8221;p&#8221;,[[0,[0,1],1,&#8221;# maximize a window&#8221;],[0,[],0,&#8221;shift + alt &#8211; m : yabai -m window &#8211;toggle zoom-fullscreen &#8220;],[0,[1],1,&#8221;# balance out tree of windows (resize to occupy same area)&#8221;],[0,[],1,&#8221;shift + alt &#8211; e : yabai -m space &#8211;balance&#8221;]]],[1,&#8221;h3&#8243;,[[0,[],0,&#8221;Shortcuts For Moving Windows Around&#8221;]]],[1,&#8221;h4&#8243;,[[0,[],0,&#8221;Swap Windows Within Space&#8221;]]],[1,&#8221;p&#8221;,[[0,[0,1],1,&#8221;# swap windows&#8221;],[0,[],1,&#8221;shift + alt &#8211; j : yabai -m window &#8211;swap south shift + alt &#8211; k : yabai -m window &#8211;swap north shift + alt &#8211; h : yabai -m window &#8211;swap west shift + alt &#8211; l : yabai -m window &#8211;swap east&#8221;]]],[1,&#8221;h4&#8243;,[[0,[],0,&#8221;Move Window Within Space And Split&#8221;]]],[1,&#8221;p&#8221;,[[0,[0,1],1,&#8221;# move window and split&#8221;],[0,[],1,&#8221;ctrl + alt &#8211; j : yabai -m window &#8211;warp south ctrl + alt &#8211; k : yabai -m window &#8211;warp north ctrl + alt &#8211; h : yabai -m window &#8211;warp west ctrl + alt &#8211; l : yabai -m window &#8211;warp east&#8221;]]],[1,&#8221;h4&#8243;,[[0,[],0,&#8221;Move Window Across Displays&#8221;]]],[1,&#8221;p&#8221;,[[0,[0,1],1,&#8221;# move window to display left and right&#8221;],[0,[],1,&#8221;shift + alt &#8211; s : yabai -m window &#8211;display west; yabai -m display &#8211;focus west;shift + alt &#8211; g : yabai -m window &#8211;display east; yabai -m display &#8211;focus east;&#8221;]]],[1,&#8221;h4&#8243;,[[0,[],0,&#8221;Move Window To A Space (Desktop/Workspace)&#8221;]]],[1,&#8221;p&#8221;,[[0,[0,1],1,&#8221;#move window to prev and next space&#8221;],[0,[],0,&#8221;shift + alt &#8211; p : yabai -m window &#8211;space prev;shift + alt &#8211; n : yabai -m window &#8211;space next;&#8221;],[0,[1],1,&#8221;# move window to space #&#8221;],[0,[],1,&#8221;shift + alt &#8211; 1 : yabai -m window &#8211;space 1;shift + alt &#8211; 2 : yabai -m window &#8211;space 2;shift + alt &#8211; 3 : yabai -m window &#8211;space 3;shift + alt &#8211; 4 : yabai -m window &#8211;space 4;shift + alt &#8211; 5 : yabai -m window &#8211;space 5;shift + alt &#8211; 6 : yabai -m window &#8211;space 6;shift + alt &#8211; 7 : yabai -m window &#8211;space 7;&#8221;]]],[1,&#8221;h3&#8243;,[[0,[],0,&#8221;Stop/Start/Restart Yabai&#8221;]]],[1,&#8221;p&#8221;,[[0,[0,1],1,&#8221;# stop/start/restart yabai&#8221;],[0,[],1,&#8221;ctrl + alt &#8211; q : brew services stop yabai ctrl + alt &#8211; s : brew services start yabai ctrl + alt &#8211; r : brew services restart yabai&#8221;]]],[1,&#8221;h2&#8243;,[[0,[],0,&#8221;That&#8217;s It, You&#8217;re Done!&#8221;]]],[1,&#8221;h2&#8243;,[[0,[],0,&#8221;Learning More&#8221;]]],[1,&#8221;p&#8221;,[[0,[],0,&#8221;If you&#8217;d like to explore everything you can do with yabai open the man page:&#8221;]]],[1,&#8221;p&#8221;,[[0,[0],1,&#8221;man yabai&#8221;]]],[1,&#8221;p&#8221;,[[0,[],0,&#8221;&#8212; or &#8212;&#8220;]]],[1,&#8221;p&#8221;,[[0,[2],1,&#8221;Yabai Github Repo&#8221;]]],[1,&#8221;p&#8221;,[[0,[3],1,&#8221;Yabai Wiki&#8221;]]],[1,&#8221;p&#8221;,[[0,[4],1,&#8221;Yabai Documentation&#8221;]]],[1,&#8221;p&#8221;,[[0,[5],1,&#8221;Skhd Github Repo&#8221;]]]]}&#8217;&gt;</p>



<h2 class="wp-block-heading">Configure MacOs Specific Settings</h2>



<ol>
<li>Open Several Desktops (~7) on Your Machine</li>



<li>Go To Keyboard Settings &gt; Shortcuts &gt; Mission Control</li>



<li>Expand Mission Control and Turn On Shortcuts for Switching Spaces 1-7 with &#8220;Ctrl + # Of Space&#8221;</li>



<li>Go to System Settings &gt; Accessibility &gt; Display</li>



<li>Turn On Reduce Motion</li>



<li>Go To System Settings &gt; Desktop &amp; Dock &gt; Mission Control</li>



<li>Turn off &#8220;Automatically Rearrange Spaces Based On Most Recent Use&#8221;</li>



<li>Personally, I only keep &#8220;Displays Have Separate Spaces&#8221; turned on here, and that&#8217;s what I&#8217;d recommend</li>
</ol>



<h2 class="wp-block-heading">Open a terminal window</h2>



<p>Open a terminal window on your mac. Could be the default terminal or something else like iTerm2 which is what I&#8217;m currently using.</p>



<h2 class="wp-block-heading">Install Homebrew</h2>



<p>Run the following command:</p>



<p><code>/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"</code></p>



<p>If necessary, when prompted, enter your password here and press enter. If you haven&#8217;t installed the XCode Command Line Tools, when prompted, press enter and homebrew will install this as well.</p>



<h2 class="wp-block-heading">Add To Path (Only Apple Silicon Macbooks)</h2>



<p>After installing, add it to the path. This step shouldn&#8217;t be necessary on Intel macs.</p>



<p>Run the following two commands to do so:</p>



<p><code>echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' &gt;&gt; ~/.zprofile eval "$(/opt/homebrew/bin/brew shellenv)"</code></p>



<h2 class="wp-block-heading">Install Yabai</h2>



<p>Run the following command:</p>



<p><code>brew install koekeishiya/formulae/yabai</code></p>



<h2 class="wp-block-heading">Install Skhd</h2>



<p>Run the following command:</p>



<p><code>brew install koekeishiya/formulae/skhd</code></p>



<h2 class="wp-block-heading">Create Yabai Config File in Home Directory</h2>



<p>Move to home folder:</p>



<p><code>cd ~</code></p>



<p>Create directory for yabai config file and move into it (config will live in &#8220;.config/yabai/yabairc&#8221;):</p>



<p><code>mkdir .config/yabai cd .config/yabai</code></p>



<p>Create yabai config file:</p>



<p><code>touch yabairc</code></p>



<h2 class="wp-block-heading">Add Configuration Options to File</h2>



<p>Open with preferred editor and add the following (&#8220;open -t yabairc&#8221;, &#8220;code yabairc&#8221; (visual studio code), &#8220;vim yabairc&#8221;, etc&#8230;). There are some configuration options that will be available only if you partially disable SIP (Sytem Integrity Protection). All of the options I&#8217;ve configured below will work without disabling SIP.</p>



<p>Configure default layout to use: Binary Space Partitioning.</p>



<p><code><em># default layout (can be bsp, stack or float)</em>yabai -m config layout bsp</code></p>



<p>Configure how window splits should be made:</p>



<p><code><em># New window spawns to the right if vertical split, or bottom if horizontal split</em>yabai -m config window_placement second_child</code></p>



<p>Configure window padding:</p>



<p><code><em># padding set to 12px</em>yabai -m config top_padding 12yabai -m config bottom_padding 12yabai -m config left_padding 12yabai -m config right_padding 12yabai -m config window_gap 12</code></p>



<p>Configure mouse settings:</p>



<p><code><em># center mouse on window with focus</em>yabai -m config mouse_follows_focus on&nbsp;<em># modifier for clicking and dragging with mouse</em>yabai -m config mouse_modifier alt&nbsp;<em># set modifier + left-click drag to move window</em>yabai -m config mouse_action1 move&nbsp;<em># set modifier + right-click drag to resize window</em>yabai -m config mouse_action2 resize&nbsp;<em># when window is dropped in center of another window, swap them (on edges it will split it)</em>yabai -m mouse_drop_action swap</code></p>



<p>Disable specific apps from being managed with yabai. Use this format for the apps you&#8217;d like to disable.</p>



<p><code>yabai -m rule --add app="^System Settings$" manage=off yabai -m rule --add app="^Calculator$" manage=off yabai -m rule --add app="^Karabiner-Elements$" manage=off</code></p>



<h3 class="wp-block-heading">Start Yabai</h3>



<p>Start it like so:</p>



<p><code>brew services start yabai</code></p>



<p>Allow any prompts for accessibility permissions.</p>



<p>Restart yabai:</p>



<p><code>brew services restart yabai</code></p>



<h3 class="wp-block-heading">Start Skhd</h3>



<p>Start it like so:</p>



<p><code>brew services start skhd</code></p>



<p>Allow any prompts for accessibility permissions.</p>



<p>Restart skhd:</p>



<p><code>brew services restart skhd</code></p>



<h2 class="wp-block-heading">Create Skhd Config File in Home Directory</h2>



<p>Move to home folder:</p>



<p><code>cd ~</code></p>



<p>Create directory for skhd config file and move into it (config will live in &#8220;.config/skhd/skhdrc&#8221;):</p>



<p><code>mkdir .config/skhd cd .config/skhd</code></p>



<p>Create skhd config file:</p>



<p><code>touch skhdrc</code></p>



<h2 class="wp-block-heading">Add Keyboard Shortcuts To Config File</h2>



<p>These shortcuts are completely up to you, but you can use mine as reference. The way I like to do it is to choose two primary modifiers and a third if necessary. These could be something like &#8220;alt&#8221;, &#8220;shift + alt&#8221;, and &#8220;ctrl + alt&#8221;.</p>



<p>One recommendation is to change &#8220;shift + alt&#8221; to &#8220;hyper&#8221; if you have a &#8220;hyper&#8221; key on your keyboard (&#8220;command&#8221; + &#8220;control&#8221; + &#8220;shift&#8221; + &#8220;alt&#8221;). You could configure a &#8220;hyper&#8221; key (replacing &#8220;Caps Lock&#8221; for example) with something like &#8220;Karabiner-Elements&#8221;.</p>



<h3 class="wp-block-heading">Changing Focus Shortcuts</h3>



<h4 class="wp-block-heading">Change Focus Within Space</h4>



<p><code><em># change window focus within space</em>alt - j : yabai -m window --focus south alt - k : yabai -m window --focus north alt - h : yabai -m window --focus west alt - l : yabai -m window --focus east</code></p>



<h4 class="wp-block-heading">Change Focus Between Displays</h4>



<p><code><em>#change focus between external displays (left and right)</em>alt - s: yabai -m display --focus west alt - g: yabai -m display --focus east</code></p>



<h3 class="wp-block-heading">Shortcuts For Modifying The Layout</h3>



<p><code><em># rotate layout clockwise</em>shift + alt - r : yabai -m space --rotate 270<em># flip along y-axis</em>shift + alt - y : yabai -m space --mirror y-axis&nbsp;<em># flip along x-axis</em>shift + alt - x : yabai -m space --mirror x-axis&nbsp;<em># toggle window float</em>shift + alt - t : yabai -m window --toggle float --grid 4:4:1:1:2:2</code></p>



<h3 class="wp-block-heading">Modifying Window Size Shortcuts</h3>



<p><code><em># maximize a window</em>shift + alt - m : yabai -m window --toggle zoom-fullscreen&nbsp;<em># balance out tree of windows (resize to occupy same area)</em>shift + alt - e : yabai -m space --balance</code></p>



<h3 class="wp-block-heading">Shortcuts For Moving Windows Around</h3>



<h4 class="wp-block-heading">Swap Windows Within Space</h4>



<p><code><em># swap windows</em>shift + alt - j : yabai -m window --swap south shift + alt - k : yabai -m window --swap north shift + alt - h : yabai -m window --swap west shift + alt - l : yabai -m window --swap east</code></p>



<h4 class="wp-block-heading">Move Window Within Space And Split</h4>



<p><code><em># move window and split</em>ctrl + alt - j : yabai -m window --warp south ctrl + alt - k : yabai -m window --warp north ctrl + alt - h : yabai -m window --warp west ctrl + alt - l : yabai -m window --warp east</code></p>



<h4 class="wp-block-heading">Move Window Across Displays</h4>



<p><code><em># move window to display left and right</em>shift + alt - s : yabai -m window --display west; yabai -m display --focus west;shift + alt - g : yabai -m window --display east; yabai -m display --focus east;</code></p>



<h4 class="wp-block-heading">Move Window To A Space (Desktop/Workspace)</h4>



<p><code><em>#move window to prev and next space</em>shift + alt - p : yabai -m window --space prev;shift + alt - n : yabai -m window --space next;<em># move window to space #</em>shift + alt - 1 : yabai -m window --space 1;shift + alt - 2 : yabai -m window --space 2;shift + alt - 3 : yabai -m window --space 3;shift + alt - 4 : yabai -m window --space 4;shift + alt - 5 : yabai -m window --space 5;shift + alt - 6 : yabai -m window --space 6;shift + alt - 7 : yabai -m window --space 7;</code></p>



<h3 class="wp-block-heading">Stop/Start/Restart Yabai</h3>



<p><code><em># stop/start/restart yabai</em>ctrl + alt - q : brew services stop yabai ctrl + alt - s : brew services start yabai ctrl + alt - r : brew services restart yabai</code></p>



<h2 class="wp-block-heading">That&#8217;s It, You&#8217;re Done!</h2>



<h2 class="wp-block-heading">Learning More</h2>



<p>If you&#8217;d like to explore everything you can do with yabai open the man page:</p>



<p><code>man yabai</code></p>



<p>&#8212; or &#8212;</p>



<p><a href="https://github.com/koekeishiya/yabai">Yabai Github Repo</a></p>



<p><a href="https://github.com/koekeishiya/yabai/wiki">Yabai Wiki</a></p>



<p><a href="https://github.com/koekeishiya/yabai/blob/master/doc/yabai.asciidoc">Yabai Documentation</a></p>



<p><a href="https://github.com/koekeishiya/skhd">Skhd Github Repo</a></p>
]]></content:encoded>
					
					<wfw:commentRss>https://www.deviofuzz.com/how-to-setup-and-use-the-yabai-tiling-window-manager-on-mac/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>The door is open!</title>
		<link>https://www.deviofuzz.com/the-door-is-open/</link>
					<comments>https://www.deviofuzz.com/the-door-is-open/#respond</comments>
		
		<dc:creator><![CDATA[deviofuzz]]></dc:creator>
		<pubDate>Fri, 07 Apr 2023 19:14:43 +0000</pubDate>
				<category><![CDATA[Uncategorized]]></category>
		<guid isPermaLink="false">https://www.deviofuzz.com/?p=129</guid>

					<description><![CDATA[Welcome to devIOfuzz, the blog about programming, IT news, AI, cloud computing, and Linux. Created by Marcelo Carvalho Faleiro de Almeida, a passionate technologist and software developer, devIOfuzz aims to provide insightful and practical content for anyone interested in these fields. From the latest trends and updates in the world of programming and technology to&#8230;&#160;<a href="https://www.deviofuzz.com/the-door-is-open/" class="" rel="bookmark">Read More &#187;<span class="screen-reader-text">The door is open!</span></a>]]></description>
										<content:encoded><![CDATA[<p class="wp-block-post-time-to-read">1 minute</p>


<p>Welcome to devIOfuzz, the blog about programming, IT news, AI, cloud computing, and Linux. Created by Marcelo Carvalho Faleiro de Almeida, a passionate technologist and software developer, devIOfuzz aims to provide insightful and practical content for anyone interested in these fields.</p>



<p>From the latest trends and updates in the world of programming and technology to in-depth tutorials and tips on how to leverage AI, cloud computing, and Linux in your projects, devIOfuzz has you covered. Whether you&#8217;re a beginner or an experienced developer, there&#8217;s something for everyone here.</p>



<p>Stay up-to-date with the fast-paced and ever-evolving world of IT, and join the conversation on devIOfuzz. Subscribe to our newsletter, follow us on social media, and don&#8217;t hesitate to share your thoughts and feedback. Let&#8217;s explore the exciting world of programming and technology together!</p>
]]></content:encoded>
					
					<wfw:commentRss>https://www.deviofuzz.com/the-door-is-open/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
	</channel>
</rss>
